## jira_wiki_to_adf_converter.py Usage

`jira_wiki_to_adf_converter.py` provides comprehensive conversion from Jira Wiki Markup to Atlassian Document Format (ADF) with robust error handling and logging.

### How to Run

Run from the command line:

```bash
python3 jira_wiki_to_adf_converter.py <input-wiki-file.txt>
```

This will create an output file named `<input-wiki-file-adf.txt>` containing the ADF JSON.

### Programmatic Usage

You can also use the converter in your Python code:

```python
from jira_wiki_to_adf_converter import JiraWikiToADFConverter
converter = JiraWikiToADFConverter()
output_file = converter.convert_file('input.txt')
# Or convert text directly:
adf_content = converter.convert_text(wiki_markup_text)
```

### Error Logging

- Errors encountered during conversion (such as malformed tables, unclosed tags, invalid markup) are logged with details including line number and error type.
- Logging is enabled by default and outputs to the console.
- For each conversion, you can inspect the logs for warnings or errors about the input file's formatting.

Refer to the script's docstring and comments for more advanced usage and options.

## wiki2adf.py Usage

`wiki2adf.py` converts Jira Wiki markup files to Atlassian Document Format (ADF) JSON files.

### How to Run

Run the script from the command line:

```bash
python3 wiki2adf.py <input-wiki-file.txt> <output-adf-file.txt>
```

Example:

```bash
python3 wiki2adf.py input-1.txt output-1.txt
```

### Input

- The input file should contain Jira Wiki markup.

### Output

- The output file will contain the ADF JSON representation.
- An error log file will also be generated, named as `<output-adf-file-errors.log>` (e.g., `output-1-errors.log`).

## Error Logging

- Any formatting or parsing errors encountered during conversion are logged in the error log file.
- Each error entry includes the line number and a description of the issue.
- If blocks (like `{code}`, `{panel}`, `{noformat}`) are not properly closed, or if tables/lists are malformed, these will be reported in the log.

Check the error log file for details if the output is incomplete or unexpected.




## ------------------
# Jira Wiki Markup to ADF Converter

A comprehensive Python module that converts Jira Wiki Markup to ADF (Atlassian Document Format) with robust error handling and logging.

## Features

### Complete Jira Wiki Markup Support
- ✅ **Text Formatting**: `*bold*`, `_italic_`, `+underline+`, `-strike-`, `^super^`, `~sub~`, `{{code}}`
- ✅ **Headings**: `h1.` through `h6.` 
- ✅ **Lists**: Bullet (`*`) and numbered (`#`) with nesting
- ✅ **Tables**: Headers (`||header||`) and cells (`|cell|`)
- ✅ **Links**: `[text|url]` and `[url]` formats
- ✅ **Images**: `!image.png!` format
- ✅ **Colors**: `{color:red}text{color}` and hex colors
- ✅ **Code Blocks**: `{code:language}` and `{noformat}`
- ✅ **Quotes**: `{quote}` blocks
- ✅ **Panels**: `{panel:title=X}` blocks
- ✅ **Line Breaks**: `\\` and horizontal rules `----`

### Robust Error Handling
- **Graceful Fallbacks**: Malformed elements convert to paragraphs
- **Error Logging**: Detailed error tracking with line numbers
- **Continues Parsing**: Never stops on errors, always produces output
- **Error Summary**: Complete report of all issues encountered

### Professional Structure
- **Modular Design**: Separate handlers for each element type
- **Type Safety**: Full type hints and dataclasses
- **Performance**: Compiled regex patterns for speed
- **Extensible**: Easy to add new markup types

## Installation

```bash
# Clone the repository
git clone <repository-url>
cd jira-wiki-to-adf-converter

# No external dependencies required - uses only Python standard library

